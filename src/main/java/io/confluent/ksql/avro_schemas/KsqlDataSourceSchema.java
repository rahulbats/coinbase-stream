/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.ksql.avro_schemas;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class KsqlDataSourceSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 447942707150371577L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KsqlDataSourceSchema\",\"namespace\":\"io.confluent.ksql.avro_schemas\",\"fields\":[{\"name\":\"SEQUENCE\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"BIDS\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"string\"]}]}],\"default\":null},{\"name\":\"ASKS\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"string\"]}]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public Long SEQUENCE;
  @Deprecated public java.util.List<java.util.List<CharSequence>> BIDS;
  @Deprecated public java.util.List<java.util.List<CharSequence>> ASKS;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KsqlDataSourceSchema() {}

  /**
   * All-args constructor.
   * @param SEQUENCE The new value for SEQUENCE
   * @param BIDS The new value for BIDS
   * @param ASKS The new value for ASKS
   */
  public KsqlDataSourceSchema(Long SEQUENCE, java.util.List<java.util.List<CharSequence>> BIDS, java.util.List<java.util.List<CharSequence>> ASKS) {
    this.SEQUENCE = SEQUENCE;
    this.BIDS = BIDS;
    this.ASKS = ASKS;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return SEQUENCE;
    case 1: return BIDS;
    case 2: return ASKS;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: SEQUENCE = (Long)value$; break;
    case 1: BIDS = (java.util.List<java.util.List<CharSequence>>)value$; break;
    case 2: ASKS = (java.util.List<java.util.List<CharSequence>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'SEQUENCE' field.
   * @return The value of the 'SEQUENCE' field.
   */
  public Long getSEQUENCE() {
    return SEQUENCE;
  }

  /**
   * Sets the value of the 'SEQUENCE' field.
   * @param value the value to set.
   */
  public void setSEQUENCE(Long value) {
    this.SEQUENCE = value;
  }

  /**
   * Gets the value of the 'BIDS' field.
   * @return The value of the 'BIDS' field.
   */
  public java.util.List<java.util.List<CharSequence>> getBIDS() {
    return BIDS;
  }

  /**
   * Sets the value of the 'BIDS' field.
   * @param value the value to set.
   */
  public void setBIDS(java.util.List<java.util.List<CharSequence>> value) {
    this.BIDS = value;
  }

  /**
   * Gets the value of the 'ASKS' field.
   * @return The value of the 'ASKS' field.
   */
  public java.util.List<java.util.List<CharSequence>> getASKS() {
    return ASKS;
  }

  /**
   * Sets the value of the 'ASKS' field.
   * @param value the value to set.
   */
  public void setASKS(java.util.List<java.util.List<CharSequence>> value) {
    this.ASKS = value;
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new KsqlDataSourceSchema RecordBuilder by copying an existing KsqlDataSourceSchema instance.
   * @param other The existing instance to copy.
   * @return A new KsqlDataSourceSchema RecordBuilder
   */
  public static Builder newBuilder(KsqlDataSourceSchema other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for KsqlDataSourceSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KsqlDataSourceSchema>
    implements org.apache.avro.data.RecordBuilder<KsqlDataSourceSchema> {

    private Long SEQUENCE;
    private java.util.List<java.util.List<CharSequence>> BIDS;
    private java.util.List<java.util.List<CharSequence>> ASKS;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.SEQUENCE)) {
        this.SEQUENCE = data().deepCopy(fields()[0].schema(), other.SEQUENCE);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BIDS)) {
        this.BIDS = data().deepCopy(fields()[1].schema(), other.BIDS);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ASKS)) {
        this.ASKS = data().deepCopy(fields()[2].schema(), other.ASKS);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing KsqlDataSourceSchema instance
     * @param other The existing instance to copy.
     */
    private Builder(KsqlDataSourceSchema other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.SEQUENCE)) {
        this.SEQUENCE = data().deepCopy(fields()[0].schema(), other.SEQUENCE);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.BIDS)) {
        this.BIDS = data().deepCopy(fields()[1].schema(), other.BIDS);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ASKS)) {
        this.ASKS = data().deepCopy(fields()[2].schema(), other.ASKS);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'SEQUENCE' field.
      * @return The value.
      */
    public Long getSEQUENCE() {
      return SEQUENCE;
    }

    /**
      * Sets the value of the 'SEQUENCE' field.
      * @param value The value of 'SEQUENCE'.
      * @return This builder.
      */
    public Builder setSEQUENCE(Long value) {
      validate(fields()[0], value);
      this.SEQUENCE = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'SEQUENCE' field has been set.
      * @return True if the 'SEQUENCE' field has been set, false otherwise.
      */
    public boolean hasSEQUENCE() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'SEQUENCE' field.
      * @return This builder.
      */
    public Builder clearSEQUENCE() {
      SEQUENCE = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'BIDS' field.
      * @return The value.
      */
    public java.util.List<java.util.List<CharSequence>> getBIDS() {
      return BIDS;
    }

    /**
      * Sets the value of the 'BIDS' field.
      * @param value The value of 'BIDS'.
      * @return This builder.
      */
    public Builder setBIDS(java.util.List<java.util.List<CharSequence>> value) {
      validate(fields()[1], value);
      this.BIDS = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'BIDS' field has been set.
      * @return True if the 'BIDS' field has been set, false otherwise.
      */
    public boolean hasBIDS() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'BIDS' field.
      * @return This builder.
      */
    public Builder clearBIDS() {
      BIDS = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ASKS' field.
      * @return The value.
      */
    public java.util.List<java.util.List<CharSequence>> getASKS() {
      return ASKS;
    }

    /**
      * Sets the value of the 'ASKS' field.
      * @param value The value of 'ASKS'.
      * @return This builder.
      */
    public Builder setASKS(java.util.List<java.util.List<CharSequence>> value) {
      validate(fields()[2], value);
      this.ASKS = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ASKS' field has been set.
      * @return True if the 'ASKS' field has been set, false otherwise.
      */
    public boolean hasASKS() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ASKS' field.
      * @return This builder.
      */
    public Builder clearASKS() {
      ASKS = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public KsqlDataSourceSchema build() {
      try {
        KsqlDataSourceSchema record = new KsqlDataSourceSchema();
        record.SEQUENCE = fieldSetFlags()[0] ? this.SEQUENCE : (Long) defaultValue(fields()[0]);
        record.BIDS = fieldSetFlags()[1] ? this.BIDS : (java.util.List<java.util.List<CharSequence>>) defaultValue(fields()[1]);
        record.ASKS = fieldSetFlags()[2] ? this.ASKS : (java.util.List<java.util.List<CharSequence>>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
